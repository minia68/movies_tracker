// Autogenerated from Pigeon (v0.1.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import
import 'dart:async';
import 'package:flutter/services.dart';

class ShowRequest {
  String channelExternalId;
  String programExternalId;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['channelExternalId'] = channelExternalId;
    pigeonMap['programExternalId'] = programExternalId;
    return pigeonMap;
  }
  // ignore: unused_element
  static ShowRequest _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final ShowRequest result = ShowRequest();
    result.channelExternalId = pigeonMap['channelExternalId'];
    result.programExternalId = pigeonMap['programExternalId'];
    return result;
  }
}

class CreateResponse {
  int id;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['id'] = id;
    return pigeonMap;
  }
  // ignore: unused_element
  static CreateResponse _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final CreateResponse result = CreateResponse();
    result.id = pigeonMap['id'];
    return result;
  }
}

class CreateChannelRequest {
  String name;
  String logoDrawableResourceName;
  bool defaultChannel;
  String externalId;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['name'] = name;
    pigeonMap['logoDrawableResourceName'] = logoDrawableResourceName;
    pigeonMap['defaultChannel'] = defaultChannel;
    pigeonMap['externalId'] = externalId;
    return pigeonMap;
  }
  // ignore: unused_element
  static CreateChannelRequest _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final CreateChannelRequest result = CreateChannelRequest();
    result.name = pigeonMap['name'];
    result.logoDrawableResourceName = pigeonMap['logoDrawableResourceName'];
    result.defaultChannel = pigeonMap['defaultChannel'];
    result.externalId = pigeonMap['externalId'];
    return result;
  }
}

class DeleteRequest {
  int id;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['id'] = id;
    return pigeonMap;
  }
  // ignore: unused_element
  static DeleteRequest _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final DeleteRequest result = DeleteRequest();
    result.id = pigeonMap['id'];
    return result;
  }
}

class CreateProgramRequest {
  int programId;
  int channelId;
  int type;
  String title;
  String description;
  String posterArtUri;
  int posterArtAspectRatio;
  String reviewRating;
  int reviewRatingStyle;
  String releaseDate;
  String externalId;
  String channelExternalId;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['programId'] = programId;
    pigeonMap['channelId'] = channelId;
    pigeonMap['type'] = type;
    pigeonMap['title'] = title;
    pigeonMap['description'] = description;
    pigeonMap['posterArtUri'] = posterArtUri;
    pigeonMap['posterArtAspectRatio'] = posterArtAspectRatio;
    pigeonMap['reviewRating'] = reviewRating;
    pigeonMap['reviewRatingStyle'] = reviewRatingStyle;
    pigeonMap['releaseDate'] = releaseDate;
    pigeonMap['externalId'] = externalId;
    pigeonMap['channelExternalId'] = channelExternalId;
    return pigeonMap;
  }
  // ignore: unused_element
  static CreateProgramRequest _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final CreateProgramRequest result = CreateProgramRequest();
    result.programId = pigeonMap['programId'];
    result.channelId = pigeonMap['channelId'];
    result.type = pigeonMap['type'];
    result.title = pigeonMap['title'];
    result.description = pigeonMap['description'];
    result.posterArtUri = pigeonMap['posterArtUri'];
    result.posterArtAspectRatio = pigeonMap['posterArtAspectRatio'];
    result.reviewRating = pigeonMap['reviewRating'];
    result.reviewRatingStyle = pigeonMap['reviewRatingStyle'];
    result.releaseDate = pigeonMap['releaseDate'];
    result.externalId = pigeonMap['externalId'];
    result.channelExternalId = pigeonMap['channelExternalId'];
    return result;
  }
}

class GetInitialDataResponse {
  String channelExternalId;
  String programExternalId;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['channelExternalId'] = channelExternalId;
    pigeonMap['programExternalId'] = programExternalId;
    return pigeonMap;
  }
  // ignore: unused_element
  static GetInitialDataResponse _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final GetInitialDataResponse result = GetInitialDataResponse();
    result.channelExternalId = pigeonMap['channelExternalId'];
    result.programExternalId = pigeonMap['programExternalId'];
    return result;
  }
}

class GetChannelsResponse {
  List channels;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['channels'] = channels;
    return pigeonMap;
  }
  // ignore: unused_element
  static GetChannelsResponse _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final GetChannelsResponse result = GetChannelsResponse();
    result.channels = pigeonMap['channels'];
    return result;
  }
}

class SetChannelBrowsableRequest {
  int id;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['id'] = id;
    return pigeonMap;
  }
  // ignore: unused_element
  static SetChannelBrowsableRequest _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final SetChannelBrowsableRequest result = SetChannelBrowsableRequest();
    result.id = pigeonMap['id'];
    return result;
  }
}

class Channel {
  int id;
  String externalId;
  bool isBrowsable;
  String title;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['id'] = id;
    pigeonMap['externalId'] = externalId;
    pigeonMap['isBrowsable'] = isBrowsable;
    pigeonMap['title'] = title;
    return pigeonMap;
  }
  // ignore: unused_element
  static Channel _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final Channel result = Channel();
    result.id = pigeonMap['id'];
    result.externalId = pigeonMap['externalId'];
    result.isBrowsable = pigeonMap['isBrowsable'];
    result.title = pigeonMap['title'];
    return result;
  }
}

class GetProgramsIdsResponse {
  List programsIds;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['programsIds'] = programsIds;
    return pigeonMap;
  }
  // ignore: unused_element
  static GetProgramsIdsResponse _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final GetProgramsIdsResponse result = GetProgramsIdsResponse();
    result.programsIds = pigeonMap['programsIds'];
    return result;
  }
}

class GetProgramsIdsRequest {
  int channelId;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['channelId'] = channelId;
    return pigeonMap;
  }
  // ignore: unused_element
  static GetProgramsIdsRequest _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final GetProgramsIdsRequest result = GetProgramsIdsRequest();
    result.channelId = pigeonMap['channelId'];
    return result;
  }
}

abstract class AtvChannelsApiFlutter {
  void showChannel(ShowRequest arg);
  void showProgram(ShowRequest arg);
  static void setup(AtvChannelsApiFlutter api) {
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.AtvChannelsApiFlutter.showChannel', StandardMessageCodec());
      channel.setMessageHandler((dynamic message) async {
        final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
        final ShowRequest input = ShowRequest._fromMap(mapMessage);
        api.showChannel(input);
      });
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.AtvChannelsApiFlutter.showProgram', StandardMessageCodec());
      channel.setMessageHandler((dynamic message) async {
        final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
        final ShowRequest input = ShowRequest._fromMap(mapMessage);
        api.showProgram(input);
      });
    }
  }
}

class AtvChannelsApi {
  Future<CreateResponse> createChannel(CreateChannelRequest arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AtvChannelsApi.createChannel', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return CreateResponse._fromMap(replyMap['result']);
    }
    
  }
  Future<void> deleteChannel(DeleteRequest arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AtvChannelsApi.deleteChannel', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<CreateResponse> createProgram(CreateProgramRequest arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AtvChannelsApi.createProgram', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return CreateResponse._fromMap(replyMap['result']);
    }
    
  }
  Future<void> updateProgram(CreateProgramRequest arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AtvChannelsApi.updateProgram', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<void> deleteProgram(DeleteRequest arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AtvChannelsApi.deleteProgram', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<GetInitialDataResponse> getInitialData() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AtvChannelsApi.getInitialData', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return GetInitialDataResponse._fromMap(replyMap['result']);
    }
    
  }
  Future<GetChannelsResponse> getChannels() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AtvChannelsApi.getChannels', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return GetChannelsResponse._fromMap(replyMap['result']);
    }
    
  }
  Future<void> setChannelBrowsable(SetChannelBrowsableRequest arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AtvChannelsApi.setChannelBrowsable', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<void> dummy(Channel arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AtvChannelsApi.dummy', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<GetProgramsIdsResponse> getProgramsIds(GetProgramsIdsRequest arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.AtvChannelsApi.getProgramsIds', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return GetProgramsIdsResponse._fromMap(replyMap['result']);
    }
    
  }
}

