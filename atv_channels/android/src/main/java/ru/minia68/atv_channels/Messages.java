// Autogenerated from Pigeon (v0.1.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package ru.minia68.atv_channels;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.StandardMessageCodec;
import java.util.ArrayList;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings("unused")
public class Messages {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ShowRequest {
    private String channelExternalId;
    public String getChannelExternalId() { return channelExternalId; }
    public void setChannelExternalId(String setterArg) { this.channelExternalId = setterArg; }

    private String programExternalId;
    public String getProgramExternalId() { return programExternalId; }
    public void setProgramExternalId(String setterArg) { this.programExternalId = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("channelExternalId", channelExternalId);
      toMapResult.put("programExternalId", programExternalId);
      return toMapResult;
    }
    static ShowRequest fromMap(HashMap map) {
      ShowRequest fromMapResult = new ShowRequest();
      Object channelExternalId = map.get("channelExternalId");
      fromMapResult.channelExternalId = (String)channelExternalId;
      Object programExternalId = map.get("programExternalId");
      fromMapResult.programExternalId = (String)programExternalId;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CreateResponse {
    private Long id;
    public Long getId() { return id; }
    public void setId(Long setterArg) { this.id = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("id", id);
      return toMapResult;
    }
    static CreateResponse fromMap(HashMap map) {
      CreateResponse fromMapResult = new CreateResponse();
      Object id = map.get("id");
      fromMapResult.id = (id == null) ? null : ((id instanceof Integer) ? (Integer)id : (Long)id);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CreateChannelRequest {
    private String name;
    public String getName() { return name; }
    public void setName(String setterArg) { this.name = setterArg; }

    private String logoDrawableResourceName;
    public String getLogoDrawableResourceName() { return logoDrawableResourceName; }
    public void setLogoDrawableResourceName(String setterArg) { this.logoDrawableResourceName = setterArg; }

    private Boolean defaultChannel;
    public Boolean getDefaultChannel() { return defaultChannel; }
    public void setDefaultChannel(Boolean setterArg) { this.defaultChannel = setterArg; }

    private String externalId;
    public String getExternalId() { return externalId; }
    public void setExternalId(String setterArg) { this.externalId = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("name", name);
      toMapResult.put("logoDrawableResourceName", logoDrawableResourceName);
      toMapResult.put("defaultChannel", defaultChannel);
      toMapResult.put("externalId", externalId);
      return toMapResult;
    }
    static CreateChannelRequest fromMap(HashMap map) {
      CreateChannelRequest fromMapResult = new CreateChannelRequest();
      Object name = map.get("name");
      fromMapResult.name = (String)name;
      Object logoDrawableResourceName = map.get("logoDrawableResourceName");
      fromMapResult.logoDrawableResourceName = (String)logoDrawableResourceName;
      Object defaultChannel = map.get("defaultChannel");
      fromMapResult.defaultChannel = (Boolean)defaultChannel;
      Object externalId = map.get("externalId");
      fromMapResult.externalId = (String)externalId;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class DeleteRequest {
    private Long id;
    public Long getId() { return id; }
    public void setId(Long setterArg) { this.id = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("id", id);
      return toMapResult;
    }
    static DeleteRequest fromMap(HashMap map) {
      DeleteRequest fromMapResult = new DeleteRequest();
      Object id = map.get("id");
      fromMapResult.id = (id == null) ? null : ((id instanceof Integer) ? (Integer)id : (Long)id);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CreateProgramRequest {
    private Long programId;
    public Long getProgramId() { return programId; }
    public void setProgramId(Long setterArg) { this.programId = setterArg; }

    private Long channelId;
    public Long getChannelId() { return channelId; }
    public void setChannelId(Long setterArg) { this.channelId = setterArg; }

    private Long type;
    public Long getType() { return type; }
    public void setType(Long setterArg) { this.type = setterArg; }

    private String title;
    public String getTitle() { return title; }
    public void setTitle(String setterArg) { this.title = setterArg; }

    private String description;
    public String getDescription() { return description; }
    public void setDescription(String setterArg) { this.description = setterArg; }

    private String posterArtUri;
    public String getPosterArtUri() { return posterArtUri; }
    public void setPosterArtUri(String setterArg) { this.posterArtUri = setterArg; }

    private Long posterArtAspectRatio;
    public Long getPosterArtAspectRatio() { return posterArtAspectRatio; }
    public void setPosterArtAspectRatio(Long setterArg) { this.posterArtAspectRatio = setterArg; }

    private String reviewRating;
    public String getReviewRating() { return reviewRating; }
    public void setReviewRating(String setterArg) { this.reviewRating = setterArg; }

    private Long reviewRatingStyle;
    public Long getReviewRatingStyle() { return reviewRatingStyle; }
    public void setReviewRatingStyle(Long setterArg) { this.reviewRatingStyle = setterArg; }

    private String releaseDate;
    public String getReleaseDate() { return releaseDate; }
    public void setReleaseDate(String setterArg) { this.releaseDate = setterArg; }

    private String externalId;
    public String getExternalId() { return externalId; }
    public void setExternalId(String setterArg) { this.externalId = setterArg; }

    private String channelExternalId;
    public String getChannelExternalId() { return channelExternalId; }
    public void setChannelExternalId(String setterArg) { this.channelExternalId = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("programId", programId);
      toMapResult.put("channelId", channelId);
      toMapResult.put("type", type);
      toMapResult.put("title", title);
      toMapResult.put("description", description);
      toMapResult.put("posterArtUri", posterArtUri);
      toMapResult.put("posterArtAspectRatio", posterArtAspectRatio);
      toMapResult.put("reviewRating", reviewRating);
      toMapResult.put("reviewRatingStyle", reviewRatingStyle);
      toMapResult.put("releaseDate", releaseDate);
      toMapResult.put("externalId", externalId);
      toMapResult.put("channelExternalId", channelExternalId);
      return toMapResult;
    }
    static CreateProgramRequest fromMap(HashMap map) {
      CreateProgramRequest fromMapResult = new CreateProgramRequest();
      Object programId = map.get("programId");
      fromMapResult.programId = (programId == null) ? null : ((programId instanceof Integer) ? (Integer)programId : (Long)programId);
      Object channelId = map.get("channelId");
      fromMapResult.channelId = (channelId == null) ? null : ((channelId instanceof Integer) ? (Integer)channelId : (Long)channelId);
      Object type = map.get("type");
      fromMapResult.type = (type == null) ? null : ((type instanceof Integer) ? (Integer)type : (Long)type);
      Object title = map.get("title");
      fromMapResult.title = (String)title;
      Object description = map.get("description");
      fromMapResult.description = (String)description;
      Object posterArtUri = map.get("posterArtUri");
      fromMapResult.posterArtUri = (String)posterArtUri;
      Object posterArtAspectRatio = map.get("posterArtAspectRatio");
      fromMapResult.posterArtAspectRatio = (posterArtAspectRatio == null) ? null : ((posterArtAspectRatio instanceof Integer) ? (Integer)posterArtAspectRatio : (Long)posterArtAspectRatio);
      Object reviewRating = map.get("reviewRating");
      fromMapResult.reviewRating = (String)reviewRating;
      Object reviewRatingStyle = map.get("reviewRatingStyle");
      fromMapResult.reviewRatingStyle = (reviewRatingStyle == null) ? null : ((reviewRatingStyle instanceof Integer) ? (Integer)reviewRatingStyle : (Long)reviewRatingStyle);
      Object releaseDate = map.get("releaseDate");
      fromMapResult.releaseDate = (String)releaseDate;
      Object externalId = map.get("externalId");
      fromMapResult.externalId = (String)externalId;
      Object channelExternalId = map.get("channelExternalId");
      fromMapResult.channelExternalId = (String)channelExternalId;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class GetInitialDataResponse {
    private String channelExternalId;
    public String getChannelExternalId() { return channelExternalId; }
    public void setChannelExternalId(String setterArg) { this.channelExternalId = setterArg; }

    private String programExternalId;
    public String getProgramExternalId() { return programExternalId; }
    public void setProgramExternalId(String setterArg) { this.programExternalId = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("channelExternalId", channelExternalId);
      toMapResult.put("programExternalId", programExternalId);
      return toMapResult;
    }
    static GetInitialDataResponse fromMap(HashMap map) {
      GetInitialDataResponse fromMapResult = new GetInitialDataResponse();
      Object channelExternalId = map.get("channelExternalId");
      fromMapResult.channelExternalId = (String)channelExternalId;
      Object programExternalId = map.get("programExternalId");
      fromMapResult.programExternalId = (String)programExternalId;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class GetChannelsResponse {
    private ArrayList channels;
    public ArrayList getChannels() { return channels; }
    public void setChannels(ArrayList setterArg) { this.channels = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("channels", channels);
      return toMapResult;
    }
    static GetChannelsResponse fromMap(HashMap map) {
      GetChannelsResponse fromMapResult = new GetChannelsResponse();
      Object channels = map.get("channels");
      fromMapResult.channels = (ArrayList)channels;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SetChannelBrowsableRequest {
    private Long id;
    public Long getId() { return id; }
    public void setId(Long setterArg) { this.id = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("id", id);
      return toMapResult;
    }
    static SetChannelBrowsableRequest fromMap(HashMap map) {
      SetChannelBrowsableRequest fromMapResult = new SetChannelBrowsableRequest();
      Object id = map.get("id");
      fromMapResult.id = (id == null) ? null : ((id instanceof Integer) ? (Integer)id : (Long)id);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Channel {
    private Long id;
    public Long getId() { return id; }
    public void setId(Long setterArg) { this.id = setterArg; }

    private String externalId;
    public String getExternalId() { return externalId; }
    public void setExternalId(String setterArg) { this.externalId = setterArg; }

    private Boolean isBrowsable;
    public Boolean getIsBrowsable() { return isBrowsable; }
    public void setIsBrowsable(Boolean setterArg) { this.isBrowsable = setterArg; }

    private String title;
    public String getTitle() { return title; }
    public void setTitle(String setterArg) { this.title = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("id", id);
      toMapResult.put("externalId", externalId);
      toMapResult.put("isBrowsable", isBrowsable);
      toMapResult.put("title", title);
      return toMapResult;
    }
    static Channel fromMap(HashMap map) {
      Channel fromMapResult = new Channel();
      Object id = map.get("id");
      fromMapResult.id = (id == null) ? null : ((id instanceof Integer) ? (Integer)id : (Long)id);
      Object externalId = map.get("externalId");
      fromMapResult.externalId = (String)externalId;
      Object isBrowsable = map.get("isBrowsable");
      fromMapResult.isBrowsable = (Boolean)isBrowsable;
      Object title = map.get("title");
      fromMapResult.title = (String)title;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class GetProgramsIdsResponse {
    private ArrayList programsIds;
    public ArrayList getProgramsIds() { return programsIds; }
    public void setProgramsIds(ArrayList setterArg) { this.programsIds = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("programsIds", programsIds);
      return toMapResult;
    }
    static GetProgramsIdsResponse fromMap(HashMap map) {
      GetProgramsIdsResponse fromMapResult = new GetProgramsIdsResponse();
      Object programsIds = map.get("programsIds");
      fromMapResult.programsIds = (ArrayList)programsIds;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class GetProgramsIdsRequest {
    private Long channelId;
    public Long getChannelId() { return channelId; }
    public void setChannelId(Long setterArg) { this.channelId = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("channelId", channelId);
      return toMapResult;
    }
    static GetProgramsIdsRequest fromMap(HashMap map) {
      GetProgramsIdsRequest fromMapResult = new GetProgramsIdsRequest();
      Object channelId = map.get("channelId");
      fromMapResult.channelId = (channelId == null) ? null : ((channelId instanceof Integer) ? (Integer)channelId : (Long)channelId);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class AtvChannelsApiFlutter {
    private final BinaryMessenger binaryMessenger;
    public AtvChannelsApiFlutter(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    public void showChannel(ShowRequest argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AtvChannelsApiFlutter.showChannel", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
    public void showProgram(ShowRequest argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AtvChannelsApiFlutter.showProgram", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface AtvChannelsApi {
    CreateResponse createChannel(CreateChannelRequest arg);
    void deleteChannel(DeleteRequest arg);
    CreateResponse createProgram(CreateProgramRequest arg);
    void updateProgram(CreateProgramRequest arg);
    void deleteProgram(DeleteRequest arg);
    GetInitialDataResponse getInitialData();
    GetChannelsResponse getChannels();
    void setChannelBrowsable(SetChannelBrowsableRequest arg);
    void dummy(Channel arg);
    GetProgramsIdsResponse getProgramsIds(GetProgramsIdsRequest arg);

    /** Sets up an instance of `AtvChannelsApi` to handle messages through the `binaryMessenger` */
    static void setup(BinaryMessenger binaryMessenger, AtvChannelsApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AtvChannelsApi.createChannel", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              CreateChannelRequest input = CreateChannelRequest.fromMap((HashMap)message);
              CreateResponse output = api.createChannel(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AtvChannelsApi.deleteChannel", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              DeleteRequest input = DeleteRequest.fromMap((HashMap)message);
              api.deleteChannel(input);
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AtvChannelsApi.createProgram", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              CreateProgramRequest input = CreateProgramRequest.fromMap((HashMap)message);
              CreateResponse output = api.createProgram(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AtvChannelsApi.updateProgram", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              CreateProgramRequest input = CreateProgramRequest.fromMap((HashMap)message);
              api.updateProgram(input);
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AtvChannelsApi.deleteProgram", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              DeleteRequest input = DeleteRequest.fromMap((HashMap)message);
              api.deleteProgram(input);
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AtvChannelsApi.getInitialData", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              GetInitialDataResponse output = api.getInitialData();
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AtvChannelsApi.getChannels", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              GetChannelsResponse output = api.getChannels();
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AtvChannelsApi.setChannelBrowsable", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SetChannelBrowsableRequest input = SetChannelBrowsableRequest.fromMap((HashMap)message);
              api.setChannelBrowsable(input);
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AtvChannelsApi.dummy", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              Channel input = Channel.fromMap((HashMap)message);
              api.dummy(input);
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AtvChannelsApi.getProgramsIds", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              GetProgramsIdsRequest input = GetProgramsIdsRequest.fromMap((HashMap)message);
              GetProgramsIdsResponse output = api.getProgramsIds(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static HashMap wrapError(Exception exception) {
    HashMap<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", null);
    errorMap.put("details", null);
    return errorMap;
  }
}
